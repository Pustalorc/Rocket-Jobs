<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rocket.API</name>
    </assembly>
    <members>
        <member name="T:Rocket.API.Commands.ICommand">
            <summary>
                Base interface for commands.
                <para>
                    Commands are usually executed ingame by players or by the console. They are
                    a human interface to plugin functionalities which allow to do specific actions.
                </para>
                <para>
                    <b>Example commands include: </b>/help, !tp, ~heal, etc. (the prefixes like "/", "!", "~" are up to the
                    <see cref="T:Rocket.API.Commands.ICommandHandler">command handler</see>).
                </para>
                <para>
                    In the default <see cref="T:Rocket.API.Commands.ICommandProvider">command provider</see> implementation, non abstract classes
                    inheriting this interface are automatically found
                    and registered.
                </para>
                <para>
                    Usually commands should not be called by plugins programatically.
                </para>
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommand.Name">
            <summary>
                <para>The primary name of the command, which will be used to execute it.</para>
                <para>The primary name overrides any <see cref="P:Rocket.API.Commands.ICommand.Aliases">aliases</see> of other commands by default.</para>
                <para>
                    <b>This property must never return null.</b>
                </para>
            </summary>
            <example>
                If the name is "Help", the command will be usually be called using "/heal" (or just "heal" in console)
            </example>
        </member>
        <member name="P:Rocket.API.Commands.ICommand.Aliases">
            <summary>
                <para>The aliases of the command, which are often shorter versions of the primary name.</para>
                <para>
                    <b>This property can return null.</b>
                </para>
            </summary>
            <example>
                If the aliases are "h" and "he", the command will be callable using "/h" or "/he".
            </example>
        </member>
        <member name="P:Rocket.API.Commands.ICommand.Summary">
            <summary>
                The command summary.
                <para><b>This proprty must not return null.</b>.</para>
            </summary>
            <example>
                <c>"This command heals you or someone else."</c>
            </example>
        </member>
        <member name="P:Rocket.API.Commands.ICommand.Description">
            <summary>
                The full description of the command.
                <para>
                    <b>This proprty can return null</b>.
                </para>
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommand.Permission">
            <summary>
                The permission required to execute the command.
                <para>
                    <b>This property can return null.</b>
                </para>
            </summary>
            <remarks>
                When returning null, the default permission will be used, which depends on the <see cref="T:Rocket.API.Commands.ICommandHandler" />
                implementation.
                <para>
                    The default CommandHandler uses {PluginName}.{CommandName} (e.g. "MyPlugin.Heal") as permission.
                </para>
            </remarks>
            <example>
                <c>"MyPermission.Heal"</c>
            </example>
        </member>
        <member name="P:Rocket.API.Commands.ICommand.Syntax">
            <summary>
                The command syntax will be shown to the <see cref="T:Rocket.API.User.IUser" /> when the command was not used correctly.
                <para>An output for the above example could be "/heal [player] &lt;amount&gt;".</para>
                <para>The syntax should not contain Child Command usage.</para>
                <para>
                    <b>This property must never return null.</b>
                </para>
            </summary>
            <remarks>
                [...] means optional argument and &lt;...&gt; means required argument, so in this case "player" is an optional
                argument while "amount" is a required one.
            </remarks>
            <example>
                <c>"[player] &lt;amount&gt;"</c>
            </example>
        </member>
        <member name="P:Rocket.API.Commands.ICommand.ChildCommands">
            <summary>
                The child commands of this command. Child commands override the <see cref="M:Rocket.API.Commands.ICommand.Execute(Rocket.API.Commands.ICommandContext)" /> method in some cases (see
                examples).
                <para>
                    <b>This property can return null.</b>
                </para>
                <seealso cref="T:Rocket.API.Commands.IChildCommand" />
            </summary>
            <example>
                Assume a command was entered as "/mycommand sub 1 2". If the <see cref="P:Rocket.API.Commands.ICommand.Name">name</see> or an
                <see cref="P:Rocket.API.Commands.ICommand.Aliases">alias</see> of this command equals "mycommand" and a child command with the
                <see cref="P:Rocket.API.Commands.ICommand.Name">name</see>
                or an <see cref="P:Rocket.API.Commands.ICommand.Aliases">alias</see> "sub" exists, then the <see cref="M:Rocket.API.Commands.ICommand.Execute(Rocket.API.Commands.ICommandContext)">Execute</see> method of the child
                command will be called with "1" and "2" as parameters, while the <see cref="M:Rocket.API.Commands.ICommand.Execute(Rocket.API.Commands.ICommandContext)">Execute</see> method of the
                parent will not be called.
            </example>
        </member>
        <member name="M:Rocket.API.Commands.ICommand.SupportsUser(System.Type)">
            <summary>
                Defines if this command can be executed by the given user type.
                It is guaranteed that <see cref="M:Rocket.API.Commands.ICommand.Execute(Rocket.API.Commands.ICommandContext)" /> can only be called by supported users.
            </summary>
            <param name="user">The user type to check.</param>
            <returns><b>true</b> if the given user type can execute this command; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommand.Execute(Rocket.API.Commands.ICommandContext)">
            <summary>
                Executes the command if no Child Command is involved.
            </summary>
            <example>
                Assume a command was entered as "/mycommand" (also assuming the command prefix is "/"). If the
                <see cref="P:Rocket.API.Commands.ICommand.Name">name</see> or
                an <see cref="P:Rocket.API.Commands.ICommand.Aliases">alias</see> of this command equals "mycommand", then this method will be executed.
            </example>
            <seealso cref="P:Rocket.API.Commands.ICommand.ChildCommands" />
            <param name="context">The <see cref="T:Rocket.API.Commands.ICommandContext">context</see> of the command.</param>
        </member>
        <member name="T:Rocket.API.Commands.ICommandContext">
            <summary>
                A command execution context. Includes various information about the environment the command was called in.
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.ParentContext">
            <summary>
                The parent command context for Child Commands.
                <para>
                    <b>This property can return null.</b>
                </para>
            </summary>
            <example>
                If the command was entered as "/mycommand sub", this will return the parent context with parameters "sub".
            </example>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.ChildContext">
            <summary>
                The child command context.
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.RootContext">
            <summary>
                The root context.
                <para>
                    <b>This property will never return null.</b>
                </para>
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.CommandPrefix">
            <summary>
                <para>The prefix used to call this (sub) command.</para>
                <para>Useful when sending command usage messages.</para>
                <para>
                    <see cref="T:Rocket.API.Commands.IChildCommand">Child Commands</see> include their parents.
                </para>
            </summary>
            <remarks>
            </remarks>
            <example>
                <para>
                    If the command was executed using "/mycommand", it will be "/", when it was executed using "!mycommand", it
                    will be "!".
                </para>
                <para>
                    If the command was a ChildrenCommand "sub", "/mycommand sub" will return "/mycommand" as prefix.
                </para>
            </example>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.CommandAlias">
            <summary>
                The alias or name used to execute this (sub) command.
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.Command">
            <summary>
                <para>The (sub) command associated with the context.</para>
                <para>
                    <b>This property will never return null.</b>
                </para>
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.User">
            <summary>
                <para>The user of the command.</para>
                <para>Is guaranteed to be a <see cref="M:Rocket.API.Commands.ICommand.SupportsUser(System.Type)">supported user</see>.</para>
                <para>
                    <b>This property will never return null.</b>
                </para>
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.Parameters">
            <summary>
                <para>The parameters of the (sub) command.</para>
                <para>
                    <b>This property will never return null.</b>
                </para>
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommandContext.Container">
            <summary>
                <para>The dependency container of the context.</para>
                <para>
                    <b>This property will never return null.</b>
                </para>
            </summary>
        </member>
        <member name="M:Rocket.API.Commands.ICommandContext.SendCommandUsage">
            <summary>
                Sends the command usage to the user.
            </summary>
        </member>
        <member name="T:Rocket.API.Commands.ICommandFriendlyException">
            <summary>
                Defines a user friendly exception.
            </summary>
        </member>
        <member name="M:Rocket.API.Commands.ICommandFriendlyException.SendErrorMessage(Rocket.API.Commands.ICommandContext)">
            <summary>
                Sends the error message to the user of the command context.
            </summary>
            <param name="context">The related command context.</param>
        </member>
        <member name="T:Rocket.API.Commands.ICommandHandler">
            <summary>
                The service responsible for handling commands.
            </summary>
        </member>
        <member name="M:Rocket.API.Commands.ICommandHandler.HandleCommand(Rocket.API.User.IUser,System.String,System.String)">
            <summary>
                Handles a command
            </summary>
            <param name="user">
                The <see cref="T:Rocket.API.User.IUser">command user</see> of the command. Guaranteed to be a
                <see cref="M:Rocket.API.Commands.ICommandHandler.SupportsUser(System.Type)">supported command user</see>.
            </param>
            <param name="commandLine">The command line (e.g. "/mycommand sub").</param>
            <param name="prefix">The <see cref="P:Rocket.API.Commands.ICommandContext.CommandPrefix">prefix</see> of the command.</param>
            <returns><b>true</b> if the command was handled; otherwise, <b>false</b>.</returns>
            <remarks>
                When returning false, the next command handler will be called.
                If no command handler could handle the command, it will be assumed that the command does not exist.
            </remarks>
        </member>
        <member name="M:Rocket.API.Commands.ICommandHandler.SupportsUser(System.Type)">
            <summary>
                Defines if this command handler can handle the given command user type.
            </summary>
            <param name="User">The <see cref="T:Rocket.API.User.IUser">command user</see> type to check.</param>
            <returns><b>true</b> if the command user type is supported; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Rocket.API.Commands.ICommandParameters">
            <summary>
                Parameters of a command.
            </summary>
            <remarks>
                When a command was entered as "/mycommand test 5 b", this class will handle and represent "test", "a" and "b".
            </remarks>
        </member>
        <member name="P:Rocket.API.Commands.ICommandParameters.Item(System.Int32)">
            <summary>
                Returns the n. command parameter.
                <para>Index must be less than <see cref="P:Rocket.API.Commands.ICommandParameters.Length">length</see> and not negative.</para>
                <para>This property will never return null.</para>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                When <i>index</i> is equal or greater than
                <see cref="P:Rocket.API.Commands.ICommandParameters.Length">length</see> or negative.
            </exception>
            <param name="index">The zero-based index of the parameter.</param>
            <seealso cref="P:System.Collections.ArrayList.Item(System.Int32)" />
            <returns>the n. command parameter as string.</returns>
        </member>
        <member name="P:Rocket.API.Commands.ICommandParameters.Length">
            <summary>
                The length (amount) of the parameters.
            </summary>
            <example>
                If the command was entered as "/mycommand test 5 b", it would return "3".
            </example>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)">
            <summary>
                <para>Gets the parameter value at the given index. The value will parsed to the given type. </para>
                <para>Types like <i>IPlayer</i>, <i>IOnlinePlayer</i>, etc. are supported.</para>
            </summary>
            <example>
                Assume the command was entered as "/mycommand test 5 b". <br />
                <c>Get&lt;string&gt;(0)</c> would be equal to "test" (string). <br />
                <c>Get&lt;int&gt;(1)</c> would be equal to 5 (int). <br />
                <c>Get&lt;string&gt;(1)</c> would be equal to "5" (string). <br />
                <c>Get&lt;string&gt;(2)</c> would be equal to "b" (string).
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">
                when <i>index</i> is equal or greater than
                <see cref="P:Rocket.API.Commands.ICommandParameters.Length">length</see> or negative.
            </exception>
            <typeparam name="T">The type to parse the parameter as.</typeparam>
            <param name="index">The zero-based parameter index.</param>
            <returns>The parsed parameter value.</returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.Get(System.Int32,System.Type)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </exception>
            <param name="index">
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </param>
            <param name="type">The type to parse the parameter as.</param>
            <returns>
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32,``0)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </summary>
            <typeparam name="T">
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </typeparam>
            <param name="index">
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </param>
            <param name="defaultValue">The default return value.</param>
            <returns>
                the parsed parameter value if the given index was valid and the parameter could be parsed to the given type;
                otherwise <i>defaultValue</i>.
            </returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.Get(System.Int32,System.Type,System.Object)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32,``0)" />
            </summary>
            <param name="index">
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32,``0)" />
            </param>
            <param name="type">The type to parse the parameters as.</param>
            <param name="defaultValue">The default return value.</param>
            <returns>
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32,``0)" />
            </returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.TryGet``1(System.Int32,``0@)">
            <summary>
                Tries to get and parse a parameter. See <see cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />.
            </summary>
            <typeparam name="T">
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </typeparam>
            <param name="index">
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.Get``1(System.Int32)" />
            </param>
            <param name="value">The parsed parameter value.</param>
            <returns>
                <b>true</b> if the given index was valid and the parameter could be parsed to the given type; otherwise
                <b>false</b>.
            </returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.GetArgumentLine(System.Int32)">
            <summary>
                Returns the joined arguments starting from the given position.
            </summary>
            <example>
                If the command was entered as "/mycommand dosomething a bla c" it would return "a bla c" if startPosition was 1.
            </example>
            <param name="startPosition">The zero based position to start from.</param>
            <exception cref="T:System.IndexOutOfRangeException">If startPosition is greater than or equal <see cref="P:Rocket.API.Commands.ICommandParameters.Length">length</see>.</exception>
            <returns>he joined arguments starting from the given position</returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.GetArgumentLine(System.Int32,System.Int32)">
            <summary>
                Returns the joined arguments starting at the given position.
            </summary>
            <example>
                If the command was entered as "/mycommand dosomething a bla c" it would return "a bla" if startPosition was 1 and
                endPosition was 2.
            </example>
            <param name="startPosition">The zero based position to start from.</param>
            <param name="endPosition">The end position.</param>
            <exception cref="T:System.IndexOutOfRangeException">
                If startPosition or endPosition is greater than or equal
                <see cref="P:Rocket.API.Commands.ICommandParameters.Length">length</see>.
            </exception>
            <exception cref="T:System.ArgumentException">If startPosition is greater than or equal endPosition.</exception>
            <returns>he joined arguments starting from the given position</returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.TryGet(System.Int32,System.Type,System.Object@)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.TryGet``1(System.Int32,``0@)" />
            </summary>
            <param name="index">
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.TryGet``1(System.Int32,``0@)" />
            </param>
            <param name="type">The type to parse the parameters as.</param>
            <param name="value">The parsed parameter value.</param>
            <returns>
                <inheritdoc cref="M:Rocket.API.Commands.ICommandParameters.TryGet``1(System.Int32,``0@)" />
            </returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.ToArray">
            <summary>
                Gets the parameters as string array.
            </summary>
            <returns>the parameters as string array.</returns>
        </member>
        <member name="M:Rocket.API.Commands.ICommandParameters.ToList">
            <summary>
                Gets the parameters as string list.
            </summary>
            <returns>the parameters as string list.</returns>
        </member>
        <member name="T:Rocket.API.Commands.ICommandProvider">
            <summary>
                A service which provides a set of commands.
            </summary>
        </member>
        <member name="P:Rocket.API.Commands.ICommandProvider.Commands">
            <summary>
                The commands of this provider.
                <para>
                    <b>This property will never return null.</b>
                </para>
            </summary>
        </member>
        <member name="M:Rocket.API.Commands.ICommandProvider.GetOwner(Rocket.API.Commands.ICommand)">
            <summary>
                The owner of the command.
            </summary>
            <param name="command">The command to get the owner of.</param>
        </member>
        <member name="M:Rocket.API.Commands.ICommandProvider.Init">
            <summary>
                Inits the commands provider.
            </summary>
        </member>
        <member name="T:Rocket.API.Commands.IConsole">
            <summary>
                This <see cref="T:Rocket.API.User.IUser">user</see> is used when executing commands from console.
                <para>
                    Altough plugins could use it to call commands programatically, it is recommended that they implement their own
                    user.
                </para>
            </summary>
        </member>
        <member name="M:Rocket.API.Commands.IConsole.WriteLine(System.String,System.Object[])">
            <inheritdoc cref="M:System.Console.WriteLine(System.String,System.Object[])" />
            <param name="format">The format.</param>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="M:Rocket.API.Commands.IConsole.WriteLine(Rocket.API.Logging.LogLevel,System.String,System.Object[])">
            <inheritdoc cref="M:System.Console.WriteLine(System.String,System.Object[])" />
            <param name="level">The log level.</param>
            <param name="format">The format.</param>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="M:Rocket.API.Commands.IConsole.WriteLine(Rocket.API.Logging.LogLevel,System.String,System.Nullable{System.Drawing.Color},System.Object[])">
            <inheritdoc cref="M:System.Console.WriteLine(System.String,System.Object[])" />
            <param name="color">The color to use.</param>
            <param name="level">The log level.</param>
            <param name="format">The format.</param>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="M:Rocket.API.Commands.IConsole.WriteLine(System.String,System.Nullable{System.Drawing.Color},System.Object[])">
            <inheritdoc cref="M:System.Console.WriteLine(System.String,System.Object[])" />
            <param name="color">The color to use.</param>
            <param name="format">The format.</param>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="M:Rocket.API.Commands.IConsole.Write(System.String,System.Nullable{System.Drawing.Color},System.Object[])">
            <inheritdoc cref="M:System.Console.Write(System.String,System.Object[])" />
            <param name="color">The color to use.</param>
            <param name="format">The format.</param>
            <param name="bindings">The bindings.</param>
        </member>
        <member name="M:Rocket.API.Commands.IConsole.Write(System.String,System.Object[])">
            <inheritdoc cref="M:System.Console.Write(System.String,System.Object[])" />
        </member>
        <member name="T:Rocket.API.Commands.IChildCommand">
            <summary>
                A child Command. See <see cref="P:Rocket.API.Commands.ICommand.ChildCommands" />.
                <para>Will not be automatically registered, must be returned by <see cref="P:Rocket.API.Commands.ICommand.ChildCommands" />.</para>
            </summary>
        </member>
        <member name="T:Rocket.API.Commands.IChildCommand`1">
            <summary>
                A child Command. See <see cref="P:Rocket.API.Commands.ICommand.ChildCommands" />.
                <para>Will be automatically registered to <i>T</i> as child command.</para>
            </summary>
            <typeparam name="T">The parent command.</typeparam>
        </member>
        <member name="T:Rocket.API.DependencyInjection.IService">
            <summary>
                Represents a service implementation.
            </summary>
        </member>
        <member name="T:Rocket.API.DependencyInjection.ServiceResolutionFailedException">
            <summary>
                Thrown when a service could not be resolved.
            </summary>
        </member>
        <member name="M:Rocket.API.DependencyInjection.ServiceResolutionFailedException.#ctor(System.Type)">
            <param name="service">The service which could not be resolved.</param>
        </member>
        <member name="M:Rocket.API.DependencyInjection.ServiceResolutionFailedException.#ctor(System.Type,System.String)">
            <param name="service">The service which could not be resolved.</param>
            <param name="mappingName">The mapping name.</param>
        </member>
        <member name="P:Rocket.API.DependencyInjection.ServiceResolutionFailedException.MappingName">
            <summary>
                The mapping name used to resolve the service.
            </summary>
        </member>
        <member name="P:Rocket.API.DependencyInjection.ServiceResolutionFailedException.Service">
            <summary>
                The service which could not be found.
            </summary>
        </member>
        <member name="T:Rocket.API.DependencyInjection.IProxyableService">
            <summary>
                Defines a service which can be proxied.
            </summary>
        </member>
        <member name="P:Rocket.API.DependencyInjection.IProxyableService.ServiceName">
            <summary>
                The unique name of the service implementation.
            </summary>
        </member>
        <member name="T:Rocket.API.DependencyInjection.IDependencyContainer">
            <summary>
                A dependency container. See
                <a href="https://msdn.microsoft.com/en-us/library/ff921087.aspx">https://msdn.microsoft.com/en-us/library/ff921087.aspx</a>
                for more.
            </summary>
        </member>
        <member name="P:Rocket.API.DependencyInjection.IDependencyContainer.ParentContainer">
            <summary>
                The parent container.
            </summary>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyContainer.CreateChildContainer">
            <summary>
                Creates a child container.
            </summary>
            <returns>The created child container.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyContainer.RegisterType``2(System.String[])">
            <summary>
                Registers a service implementation. These implementation are not be shared between components.
            </summary>
            <typeparam name="TInterface">The service interface.</typeparam>
            <typeparam name="TClass">The service implementation.</typeparam>
            <param name="mappingNames">The mapping names. Include <b>null</b> in mapping names to override default provider.</param>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyContainer.RegisterSingletonType``2(System.String[])">
            <summary>
                Registers a singleton service implementation. Singleton implementation instances are shared between all components.
            </summary>
            <typeparam name="TInterface">The service interface.</typeparam>
            <typeparam name="TClass">The service implementation.</typeparam>
            <param name="mappingNames">The mapping names. Include <b>null</b> in mapping names to override default provider.</param>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyContainer.RegisterInstance``1(``0,System.String[])">
            <summary>
                Registers a service implementation. These implementation are not be shared between components.
            </summary>
            <typeparam name="TInterface">The service interface.</typeparam>
            <param name="value">The service implementation instance.</param>
            <param name="mappingNames">The mapping names. Include <b>null</b> in mapping names to override default provider.</param>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyContainer.RegisterSingletonInstance``1(``0,System.String[])">
            <summary>
                Registers a singleton service implementation. Singleton implementation instances are shared between all components.
            </summary>
            <typeparam name="TInterface">The service interface.</typeparam>
            <param name="value">The service implementation instance.</param>
            <param name="mappingNames">The mapping names. Include <b>null</b> in mapping names to override default provider.</param>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyContainer.UnregisterType``1(System.String[])">
            <summary>
                Unregisters a type.
            </summary>
            <typeparam name="T">The type to unregister.</typeparam>
            <param name="mappingNames">The mapping names to unregister. If null or empty it will unregister everything.</param>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyContainer.UnregisterType(System.Type,System.String[])">
            <summary>
                Unregisters a type.
            </summary>
            <param name="type">The type to unregister.</param>
            <param name="mappingNames">The mapping names to unregister. If null or empty it will unregister everything.</param>
        </member>
        <member name="T:Rocket.API.DependencyInjection.IDependencyRegistrator">
            <summary>
                Registers services. The dependency registrator is automatically constructed and called before any plugin loads.
            </summary>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyRegistrator.Register(Rocket.API.DependencyInjection.IDependencyContainer,Rocket.API.DependencyInjection.IDependencyResolver)">
            <summary>
                Registers services.
            </summary>
            <param name="container">The dependency container.</param>
            <param name="resolver">The dependency resolver.</param>
        </member>
        <member name="T:Rocket.API.DependencyInjection.IDependencyResolver">
            <summary>
                Resolves dependencies.
            </summary>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.IsRegistered``1(System.String)">
            <summary>
                Checks if an implementation exists for the given service.
            </summary>
            <typeparam name="T">The service to check.</typeparam>
            <param name="mappingName">The mapping names.</param>
            <returns><b>true</b> if the service was registered; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.IsRegistered(System.Type,System.String)">
            <summary>
                Checks if an implementation exists for the given service.
            </summary>
            <param name="type">The service to check.</param>
            <param name="mappingName">The mapping names.</param>
            <returns><b>true</b> if the service was registered; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.Activate``1">
            <summary>
                Activates an instance for the given service.
            </summary>
            <typeparam name="T">The service to activate.</typeparam>
            <returns>the activated service instance.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.Activate(System.Type)">
            <summary>
                Activates an instance for the given service.
            </summary>
            <param name="type">The service to activate.</param>
            <returns>the activated service instance.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.Resolve``1(System.String)">
            <summary>
                Gets the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if one
                exists.
            </summary>
            <typeparam name="T">The service to get the implementation instance of.</typeparam>
            <param name="mappingName">The mapping name.</param>
            <returns>
                the primary service instance implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if
                one exists.
            </returns>
            <exception cref="T:Rocket.API.DependencyInjection.ServiceResolutionFailedException">When the service could not be resolved.</exception>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.Resolve(System.Type,System.String)">
            <summary>
                Gets the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if one
                exists.
            </summary>
            <param name="serviceType">The service to get the implementation instance of.</param>
            <param name="mappingName">The mapping name.</param>
            <returns>
                the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if one
                exists.
            </returns>
            <exception cref="T:Rocket.API.DependencyInjection.ServiceResolutionFailedException">When the service could not be resolved.</exception>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.Resolve``1(System.String,System.Object[])">
            <summary>
                Gets the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if one
                exists.
            </summary>
            <typeparam name="T">The service to get the implementation instance of.</typeparam>
            <param name="mappingName">The mapping name.</param>
            <param name="parameters">The service parameters.</param>
            <returns>
                the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if one
                exists.
            </returns>
            <exception cref="T:Rocket.API.DependencyInjection.ServiceResolutionFailedException">When the service could not be resolved.</exception>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.Resolve(System.Type,System.String,System.Object[])">
            <summary>
                Gets the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if one
                exists.
            </summary>
            <param name="serviceType">The service to get the implementation instance of.</param>
            <param name="mappingName">The mapping names.</param>
            <param name="parameters">The service parameters.</param>
            <returns>
                the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if one
                exists.
            </returns>
            <exception cref="T:Rocket.API.DependencyInjection.ServiceResolutionFailedException">When the service could not be resolved.</exception>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.ResolveAll``1">
            <summary>
                Gets all implementation instances for the given service.
            </summary>
            <typeparam name="T">The service to get the implementation instances of.</typeparam>
            <returns>all implementation instances for the given service.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.ResolveAll(System.Type)">
            <summary>
                Gets all implementation instances for the given service.
            </summary>
            <param name="type">The service to get the implementation instances of.</param>
            <returns>all implementation instances for the given service.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.ResolveAll``1(System.Object[])">
            <summary>
                Gets all implementation instances for the given service.
            </summary>
            <typeparam name="T">The service to get the implementation instances of.</typeparam>
            <param name="parameters">The service parameters.</param>
            <returns>all implementation instances for the given service.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.ResolveAll(System.Type,System.Object[])">
            <summary>
                Gets all implementation instances for the given service.
            </summary>
            <param name="type">The service to get the implementation instances of.</param>
            <param name="parameters">The service parameters.</param>
            <returns>all implementation instances for the given service.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.TryResolve``1(System.String,``0@)">
            <summary>
                Tries to get the primary service implementation instance or the service proxy if one exists.
            </summary>
            <typeparam name="T">The service to get the implementation instance of.</typeparam>
            <param name="mappingName">The mapping name.</param>
            <param name="serviceInstance">The service implementation instance if it was resolved; otherwise, <b>null</b>.</param>
            <returns><b>true</b> if the service was resolved; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.TryResolve(System.Type,System.String,System.Object@)">
            <summary>
                Tries to get the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if
                one exists.
            </summary>
            <param name="serviceType">The service to get the implementation instance of.</param>
            <param name="mappingName">The mapping name.</param>
            <param name="serviceInstance">The service implementation instance if it was resolved; otherwise, <b>null</b>.</param>
            <returns><b>true</b> if the service was resolved; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.TryResolve``1(System.String,``0@,System.Object[])">
            <summary>
                Tries to get the primary service implementation instance or the service proxy if one exists.
            </summary>
            <typeparam name="T">The service to get the implementation instance of.</typeparam>
            <param name="mappingName">The mapping name.</param>
            <param name="serviceInstance">The service implementation instance if it was resolved; otherwise, <b>null</b>.</param>
            <param name="parameters">The service parameters.</param>
            <returns><b>true</b> if the service was resolved; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.DependencyInjection.IDependencyResolver.TryResolve(System.Type,System.String,System.Object@,System.Object[])">
            <summary>
                Tries to get the primary service implementation instance or the <see cref="T:Rocket.API.DependencyInjection.IServiceProxy">service proxy</see> if
                one exists.
            </summary>
            <param name="serviceType">The service to get the implementation instance of.</param>
            <param name="mappingName">The mapping name.</param>
            <param name="serviceInstance">The service implementation instance if it was resolved; otherwise, <b>null</b>.</param>
            <param name="parameters">The service parameters.</param>
            <returns><b>true</b> if the service was resolved; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Rocket.API.DependencyInjection.IServiceProxy`1">
            <summary>
                <inheritdoc /><br /><br />
                <b>Must deriver from <i>T</i></b>.
            </summary>
            <remarks>
                <inheritdoc />
            </remarks>
            <typeparam name="T">The service to proxy (e.g. IUserManager).</typeparam>
        </member>
        <member name="P:Rocket.API.DependencyInjection.IServiceProxy`1.ProxiedServices">
            <summary>
                q
                All service instances which were proxied.
            </summary>
        </member>
        <member name="T:Rocket.API.DependencyInjection.IServiceProxy">
            <summary>
                Defines a proxy service implementation.
            </summary>
            <remarks>
                A service proxy allows to have multiple implementations for the same service. For example,
                we can have multiple implementations for <i>IPermissionProvider</i>. The proxy allows to do this:
                <code>
                    bool hasPermission = container.Resolve&lt;IPermissionProvider&gt;().CheckPermission(player, "mypermission") == PermissionResult.Grant;
                </code>
                It looks like the code is only calling one permission provider, but in reality it is calling the the proxy which is
                calling all of the registered permission providers.<br />
                This allows us to avoid having issues with load order of providers and prevents to do always foreach with
                container.ResolveAll&lt;&gt;.
            </remarks>
        </member>
        <member name="T:Rocket.API.Player.IPlayerEntity`1">
            <summary>
                <inheritdoc cref="T:Rocket.API.Player.IPlayerEntity"/>
            </summary>
        </member>
        <member name="P:Rocket.API.Player.IPlayerEntity`1.Player">
            <summary>
                The player instance.
            </summary>
        </member>
        <member name="T:Rocket.API.Player.IPlayerEntity">
            <summary>
                Represents a player entity.
            </summary>
        </member>
        <member name="M:Rocket.API.Player.IPlayerEntity.Teleport(System.Numerics.Vector3)">
            <summary>
                Teleports the player to the given position.
            </summary>
            <param name="position">The position to teleport to.</param>
            <returns><b>True</b> if the teleport was succesful, otherwise; <b>false</b>.</returns>
        </member>
        <member name="T:Rocket.API.Player.IPlayerUser`1">
            <summary>
                <inheritdoc cref="T:Rocket.API.Player.IPlayer"/>
            </summary>
            <typeparam name="TPlayer"></typeparam>
        </member>
        <member name="P:Rocket.API.Player.IPlayerUser`1.Player">
            <summary>
                The parent player object.
            </summary>
        </member>
        <member name="T:Rocket.API.Player.IPlayerUser">
            <summary>
                A players user.
            </summary>
        </member>
        <member name="T:Rocket.API.Player.IPlayer`3">
            <summary>
                <inheritdoc cref="T:Rocket.API.Player.IPlayer" /><br /><br />
            </summary>
            <typeparam name="TEntity">The entity type of the player.</typeparam>
            <typeparam name="TUser">The user type of the player.</typeparam>
            <typeparam name="TSelf">The player itself.</typeparam>
        </member>
        <member name="P:Rocket.API.Player.IPlayer`3.User">
            <summary>
                The User that represents the online player. Might be null if not online.
            </summary>
        </member>
        <member name="P:Rocket.API.Player.IPlayer`3.Entity">
            <summary>
                The game object that is linked to this player.
            </summary>
        </member>
        <member name="T:Rocket.API.Player.IPlayer">
            <summary>
                This interface represents a player.
            </summary>
        </member>
        <member name="P:Rocket.API.Player.IPlayer.IsOnline">
            <summary>
                Checks if the player is online.
            </summary>
        </member>
        <member name="T:Rocket.API.Player.PlayerNotOnlineException">
            <summary>
                Thrown when an IPlayer is no longer online but methods are used on it that require it to be online.
            </summary>
        </member>
        <member name="M:Rocket.API.Player.PlayerNotOnlineException.#ctor">
            
        </member>
        <member name="M:Rocket.API.Player.PlayerNotOnlineException.#ctor(System.String)">
            <param name="nameOrId">The name or ID of the player which was not found.</param>
        </member>
        <member name="M:Rocket.API.Player.PlayerNotOnlineException.SendErrorMessage(Rocket.API.Commands.ICommandContext)">
            <inheritdoc />
        </member>
        <member name="T:Rocket.API.Player.PlayerIdNotFoundException">
            <summary>
                Thrown when a player was not found using an ID.
            </summary>
        </member>
        <member name="M:Rocket.API.Player.PlayerIdNotFoundException.#ctor(System.String)">
            <param name="playerId">The player ID.</param>
        </member>
        <member name="P:Rocket.API.Player.PlayerIdNotFoundException.PlayerId">
            <summary>
                The player ID.
            </summary>
        </member>
        <member name="T:Rocket.API.Player.PlayerNameNotFoundException">
            <summary>
                Thrown when a player was not found using a name.
            </summary>
        </member>
        <member name="M:Rocket.API.Player.PlayerNameNotFoundException.#ctor(System.String)">
            <param name="playerName">The player name.</param>
        </member>
        <member name="P:Rocket.API.Player.PlayerNameNotFoundException.PlayerName">
            <summary>
                The player name.
            </summary>
        </member>
        <member name="T:Rocket.API.Player.PlayerNotFoundException">
            <summary>
                Thrown when a player was not found.
            </summary>
        </member>
        <member name="M:Rocket.API.Player.PlayerNotFoundException.#ctor(System.String)">
            <param name="nameOrId">The name or ID of the player which was not found.</param>
        </member>
        <member name="M:Rocket.API.Player.PlayerNotFoundException.SendErrorMessage(Rocket.API.Commands.ICommandContext)">
            <inheritdoc />
        </member>
        <member name="T:Rocket.API.Player.IPlayerManager">
            <summary>
                The service responsible for managing players.
            </summary>
        </member>
        <member name="P:Rocket.API.Player.IPlayerManager.OnlinePlayers">
            <summary>
                Gets all online players.
            </summary>
        </member>
        <member name="M:Rocket.API.Player.IPlayerManager.GetOnlinePlayer(System.String)">
            <summary>
                Gets an online player by name or id.
            </summary>
            <param name="nameOrId">The name or id of the online player to get.</param>
            <returns>The online players instance.</returns>
            <exception cref="T:Rocket.API.Player.PlayerNotFoundException">When the player was not found.</exception>
        </member>
        <member name="M:Rocket.API.Player.IPlayerManager.GetOnlinePlayerByName(System.String)">
            <summary>
                Gets an online player by name.
            </summary>
            <param name="name">The name of the online player to get.</param>
            <returns>The online players instance.</returns>
            <exception cref="T:Rocket.API.Player.PlayerNameNotFoundException">When the player was not found.</exception>
        </member>
        <member name="M:Rocket.API.Player.IPlayerManager.GetOnlinePlayerById(System.String)">
            <summary>
                Gets an online player by id.
            </summary>
            <param name="id">The id of the online player to get.</param>
            <returns>The online players instance.</returns>
            <exception cref="T:Rocket.API.Player.PlayerIdNotFoundException">When the player was not found.</exception>
        </member>
        <member name="M:Rocket.API.Player.IPlayerManager.TryGetOnlinePlayer(System.String,Rocket.API.Player.IPlayer@)">
            <summary>
                Tries to get an online player by name or id.
            </summary>
            <param name="nameOrId">The name or id of the player to get.</param>
            <param name="output">The players instance if the player was found and is online; otherwise, <b>null</b>.</param>
            <returns><b>true</b> if the player was found and is online; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Player.IPlayerManager.TryGetOnlinePlayerById(System.String,Rocket.API.Player.IPlayer@)">
            <summary>
                Tries to get an online player by id.
            </summary>
            <param name="id">The id of the player to get.</param>
            <param name="output">The players instance if the player was found and is online; otherwise, <b>null</b>.</param>
            <returns><b>true</b> if the player was found and is online; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Player.IPlayerManager.TryGetOnlinePlayerByName(System.String,Rocket.API.Player.IPlayer@)">
            <summary>
                Tries to get an online player by name.
            </summary>
            <param name="name">The name of the player to get.</param>
            <param name="output">The players instance if the player was found and is online; otherwise, <b>null</b>.</param>
            <returns><b>true</b> if the player was found and is online; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Player.IPlayerManager.GetPlayer(System.String)">
            <summary>
                Gets an online or offline players instance.<br /><br />
                <b>This method will never return null, even if the player never connected to the server.</b> You can use
                <see cref="P:Rocket.API.User.IUser.LastSeen" /> to check if the player was ever online.
            </summary>
            <param name="id">The id of the player to get.</param>
            <returns>The player instance.</returns>
        </member>
        <member name="T:Rocket.API.User.IUser">
            <summary>
                A message communication User.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IUser.IsOnline">
            <summary>
                Checks if the user is online.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IUser.SessionConnectTime">
            <summary>
                The User connect time.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IUser.SessionDisconnectTime">
            <summary>
                The User disconnect time.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IUser.LastSeen">
            <summary>
                Gets the last time the user was online on the server or null if the user was never online before.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IUser.UserType">
            <summary>
                The user type (e.g. "DiscordUser", "Unturned", etc...)
            </summary>
        </member>
        <member name="T:Rocket.API.User.IUserInfo">
            <summary>
                Provides information for an online or offine user.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IUserInfo.UserManager">
            <summary>
                The related user manager.
            </summary>
        </member>
        <member name="T:Rocket.API.User.IUserManager">
            <summary>
                The service responsible for managing users.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IUserManager.Users">
            <summary>
                The online users.
            </summary>
        </member>
        <member name="M:Rocket.API.User.IUserManager.Kick(Rocket.API.User.IUser,Rocket.API.User.IUser,System.String)">
            <summary>
                Kicks (disconnects) the given user from the server.
            </summary>
            <param name="user">The user to kick.</param>
            <param name="kickedBy">The user which kicks (optional).</param>
            <param name="reason">The kick reason whicht might be shown to the user (optional).</param>
            <returns><b>true</b> if the user could be kicked; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.User.IUserManager.Ban(Rocket.API.User.IUserInfo,Rocket.API.User.IUser,System.String,System.Nullable{System.TimeSpan})">
            <summary>
                Bans the given user from the server.
            </summary>
            <param name="user">The user to ban.</param>
            <param name="bannedBy">The user which bans (optional).</param>
            <param name="reason">The ban reason which might be shown to the user (optional).</param>
            <param name="timeSpan">The ban duration. Will never expire if null.</param>
            <returns><b>true</b> if the user could be banned; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.User.IUserManager.Unban(Rocket.API.User.IUserInfo,Rocket.API.User.IUser)">
            <summary>
                Unbans the given user from the server.
            </summary>
            <param name="user">The user to unban.</param>
            <param name="unbannedBy">The user which unbans.</param>
            <returns><b>true</b> if the user could be unbanned; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.User.IUserManager.SendMessage(Rocket.API.User.IUser,Rocket.API.User.IUser,System.String,System.Nullable{System.Drawing.Color},System.Object[])">
            <summary>
                Sends a message to the given User.
            </summary>
            <param name="color">The message color.</param>
            <param name="sender">The sender of the message (optional).</param>
            <param name="receiver">The receiver of the message.</param>
            <param name="message">The message to send.</param>
            <param name="arguments">The arguments for the message. See <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
        </member>
        <member name="M:Rocket.API.User.IUserManager.Broadcast(Rocket.API.User.IUser,System.Collections.Generic.IEnumerable{Rocket.API.User.IUser},System.String,System.Nullable{System.Drawing.Color},System.Object[])">
            <summary>
                Sends a message without sender to the given Users.
            </summary>
            <param name="sender">The sender of the message (optional).</param>
            <param name="receivers">The receivers of the message.</param>
            <param name="message">The message to send.</param>
            <param name="color">The message color.</param>
            <param name="arguments">The arguments for the message. See <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
        </member>
        <member name="M:Rocket.API.User.IUserManager.Broadcast(Rocket.API.User.IUser,System.String,System.Nullable{System.Drawing.Color},System.Object[])">
            <summary>
                Broadcasts the given message.
            </summary>
            <param name="sender">The sender of the message.</param>
            <param name="message">The message to broadcast.</param>
            <param name="color">The message color.</param>
            <param name="arguments">The arguments for the message. See <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
        </member>
        <member name="T:Rocket.API.User.IIdentity">
            <summary>
                An identity.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IIdentity.Id">
            <summary>
                The unique id.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IIdentity.Name">
            <summary>
                The name.
            </summary>
        </member>
        <member name="P:Rocket.API.User.IIdentity.IdentityType">
            <summary>
                The identity type.
            </summary>
        </member>
        <member name="T:Rocket.API.User.IdentityTypes">
            <summary>
                Defines built in Rocket identity types.
            </summary>
        </member>
        <member name="F:Rocket.API.User.IdentityTypes.Console">
            <summary>
                A console identity.
            </summary>
        </member>
        <member name="F:Rocket.API.User.IdentityTypes.Player">
            <summary>
                A player identitiy.
            </summary>
        </member>
        <member name="F:Rocket.API.User.IdentityTypes.Group">
            <summary>
                A group identity.
            </summary>
        </member>
        <member name="T:Rocket.API.Configuration.ConfigurationContextNotSetException">
            <summary>
                Thrown when trying to save or reload a configuration but the context was not set yet.
            </summary>
        </member>
        <member name="M:Rocket.API.Configuration.ConfigurationContextNotSetException.#ctor(Rocket.API.Configuration.IConfiguration)">
            <param name="configuration">The configuration whichs context was not set.</param>
        </member>
        <member name="P:Rocket.API.Configuration.ConfigurationContextNotSetException.Configuration">
            <summary>
                The configuration whichs context was not set.
            </summary>
        </member>
        <member name="T:Rocket.API.Configuration.ConfigurationNotLoadedException">
            <summary>
                Thrown when accessing elements of a configuration but it was not loaded.
            </summary>
        </member>
        <member name="M:Rocket.API.Configuration.ConfigurationNotLoadedException.#ctor(Rocket.API.Configuration.IConfiguration)">
            <param name="configuration">The configuration which was not loaded yet.</param>
        </member>
        <member name="P:Rocket.API.Configuration.ConfigurationNotLoadedException.Configuration">
            <summary>
                The configuration which was not loaded yet.
            </summary>
        </member>
        <member name="T:Rocket.API.Configuration.IConfigurable">
            <summary>
                An object which has a configuration.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurable.Configuration">
            <summary>
                The configuration instance.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurable.DefaultConfiguration">
            <summary>
                The default configuration.
            </summary>
        </member>
        <member name="T:Rocket.API.Configuration.IConfigurationElement">
            <summary>
                Represents a configuration node or element.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationElement.Type">
            <summary>
                The section type.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationElement.Item(System.String)">
            <summary>
                Gets a child configuration node. See <see cref="M:Rocket.API.Configuration.IConfigurationElement.GetSection(System.String)" />.
            </summary>
            <param name="path">The configuration path.</param>
            <returns>The configuration section.</returns>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationElement.Parent">
            <summary>
                The parent configuration node.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationElement.Root">
            <summary>
                The root configuration node. Can be null.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationElement.Path">
            <summary>
                The separated absolute path (e.g. MyConfig.ChildSection.MyValue).
            </summary>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.GetSection(System.String)">
            <summary>
                Gets a configuration sub-section with the specified path.
            </summary>
            <param name="path">The relative path to the section to get. See <see cref="P:Rocket.API.Configuration.IConfigurationElement.Path" />.</param>
            <returns>The <see cref="T:Rocket.API.Configuration.IConfigurationSection" />.</returns>
            <remarks>
                This method will never return <c>null</c>. If no matching sub-section is found with the specified path,
                an empty <see cref="T:IConfigurationSection" /> will be returned.
            </remarks>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.CreateSection(System.String,Rocket.API.Configuration.SectionType)">
            <summary>
                Creates a new configuration section.
            </summary>
            <param name="path">The relative path to the section to create. See <see cref="P:Rocket.API.Configuration.IConfigurationElement.Path" />.</param>
            <param name="type">The section type. See <see cref="T:Rocket.API.Configuration.SectionType" />.</param>
            <returns>the created section.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.DeleteSection(System.String)">
            <summary>
                Deletes a configuration section.
            </summary>
            <param name="path">The relative path to the section to delete. See <see cref="P:Rocket.API.Configuration.IConfigurationElement.Path" />.</param>
            <returns><b>true</b> if the section exists and could be deleted; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.GetChildren">
            <summary>
                Gets the child configuration nodes.
            </summary>
            <returns>the child configuration nodes.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.Set(System.Object)">
            <summary>
                Sets the sections value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.Get``1">
            <summary>
                Gets the sections parsed value.
            </summary>
            <typeparam name="T">The type to parse the value as.</typeparam>
            <returns>the parsed value.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.Get">
            <summary>
                GEts the sections value.
            </summary>
            <returns>the sections value.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.Get(System.Type)">
            <summary>
                Gets the sections parsed value.
            </summary>
            <param name="type">The type to parse the value as.</param>
            <returns>the parsed value if a value exists and it could be parsed; otherwise, the default value.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.Get``1(``0)">
            <summary>
                Gets the sections parsed value.
            </summary>
            <typeparam name="T">The type to parse the value as.</typeparam>
            <param name="defaultValue">The default value to use when the value could not be parsed or does not exist.</param>
            <returns>the parsed value if a value exists and it could be parsed; otherwise, the default value.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.Get(System.Type,System.Object)">
            <summary>
                Gets the sections parsed value.
            </summary>
            <param name="type">The type to parse the value as.</param>
            <param name="defaultValue">The default value to use when the value could not be parsed or does not exist.</param>
            <returns>the parsed value if a value exists and it could be parsed; otherwise, the default value.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.TryGet``1(``0@)">
            <summary>
                Tries to get a sections parsed value.
            </summary>
            <typeparam name="T">The type to parse the value as.</typeparam>
            <param name="value">The parsed value if a value exists and it could be parsed.</param>
            <returns><b>true</b> if the value exists and could be parsed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.TryGet(System.Type,System.Object@)">
            <summary>
                Tries to get a sections parsed value.
            </summary>
            <param name="type">The type to parse the value as.</param>
            <param name="value">The parsed value if a value exists and it could be parsed.</param>
            <returns><b>true</b> if the value exists and could be parsed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.ChildExists(System.String)">
            <summary>
                Checks if a child exists.
            </summary>
            <param name="path">The relative path to the child section. See <see cref="P:Rocket.API.Configuration.IConfigurationElement.Path" />.</param>
            <returns></returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfigurationElement.Clone">
            <summary>
                Returns a cloned instance excluding the context.
            </summary>
            <returns>the clone.</returns>
        </member>
        <member name="T:Rocket.API.Configuration.IConfiguration">
            <summary>
                A configuration provider. Also represents the root node of the configuration tree.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfiguration.Scheme">
            <summary>
                The configuration scheme. Can be null.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfiguration.IsLoaded">
            <summary>
                Checks if the configuration was loaded.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfiguration.ConfigurationContext">
            <summary>
                The configuration context.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfiguration.Name">
            <summary>
                The configuration type name.
            </summary>
        </member>
        <member name="M:Rocket.API.Configuration.IConfiguration.Exists(Rocket.API.Configuration.IConfigurationContext)">
            <summary>
                Checks if the configuration for the given context exists.
            </summary>
            <param name="context">The context to check.</param>
            <returns><b>true</b> if the configuration exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Configuration.IConfiguration.Load(System.Object)">
            <summary>
                Loads the configuration.
                If the configuration does not exist, it will create oen from the default configuration.<br /><br />
                <b><see cref="P:Rocket.API.Configuration.IConfiguration.ConfigurationContext" /> must be set before.</b>
            </summary>
            <param name="defaultConfiguration">The default configuration to be used if the configuration does not exist already.</param>
        </member>
        <member name="M:Rocket.API.Configuration.IConfiguration.Load(Rocket.API.Configuration.IConfigurationContext,System.Object)">
            <summary>
                Loads the configuration from the given context.
                If the configuration does not exist, it will create oen from the default configuration.<br /><br />
            </summary>
            <param name="context">The context to load from.</param>
            <param name="defaultConfiguration">The default configuration to be used if the configuration does not exist already.</param>
        </member>
        <member name="M:Rocket.API.Configuration.IConfiguration.LoadEmpty">
            <summary>
                Loads a new empty configuration without any context.
            </summary>
        </member>
        <member name="M:Rocket.API.Configuration.IConfiguration.LoadFromObject(System.Object)">
            <summary>
                Loads the configuration from the given object.
            </summary>
            <param name="o">The object to load as configuration.</param>
        </member>
        <member name="M:Rocket.API.Configuration.IConfiguration.Reload">
            <summary>
                Reloads the configuration from the provided context.<br /><br />
                <b><see cref="P:Rocket.API.Configuration.IConfiguration.ConfigurationContext" /> must be set before.</b>
            </summary>
        </member>
        <member name="M:Rocket.API.Configuration.IConfiguration.Save">
            <summary>
                Saves the configuration to the provided context.<br /><br />
                <b><see cref="P:Rocket.API.Configuration.IConfiguration.ConfigurationContext" /> must be set before.</b>
            </summary>
        </member>
        <member name="T:Rocket.API.Configuration.IConfigurationSection">
            <summary>
                Represents a child configuration section.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationSection.Key">
            <summary>
                The sections path key.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationSection.HasValue">
            <summary>
                Checks if the section has any value.
            </summary>
        </member>
        <member name="T:Rocket.API.Configuration.SectionType">
            <summary>
                Defines a sections type.
            </summary>
        </member>
        <member name="F:Rocket.API.Configuration.SectionType.Value">
            <summary>
                A value section (e.g. properties, fields, etc.). Can not have child sections.
            </summary>
        </member>
        <member name="F:Rocket.API.Configuration.SectionType.Array">
            <summary>
                An array section (e.g. int arrays, string arrays, etc.). Can not have child sections.
            </summary>
        </member>
        <member name="F:Rocket.API.Configuration.SectionType.Object">
            <summary>
                An object section which can contain child sections.
            </summary>
        </member>
        <member name="T:Rocket.API.Configuration.IConfigurationContext">
            <summary>
                A configuration context defines where a configuration should be located and how it should be named.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationContext.WorkingDirectory">
            <summary>
                The working directory for the configuration.
            </summary>
        </member>
        <member name="P:Rocket.API.Configuration.IConfigurationContext.ConfigurationName">
            <summary>
                The configuration name.<br /><br />
                <b>Must never include file endings like .json, .xml etc.</b>
            </summary>
        </member>
        <member name="T:Rocket.API.Economy.IEconomyAccount">
            <summary>
                An economy account.
            </summary>
        </member>
        <member name="P:Rocket.API.Economy.IEconomyAccount.Owner">
            <summary>
                The owner of the account.
            </summary>
        </member>
        <member name="P:Rocket.API.Economy.IEconomyAccount.Name">
            <summary>
                The name of the account.
            </summary>
        </member>
        <member name="P:Rocket.API.Economy.IEconomyAccount.Balance">
            <summary>
                The accounts balance.
            </summary>
        </member>
        <member name="P:Rocket.API.Economy.IEconomyAccount.Currency">
            <summary>
                The accounts currency. Can be null.
            </summary>
        </member>
        <member name="T:Rocket.API.Economy.IEconomyCurrency">
            <summary>
                An economy currency.
            </summary>
        </member>
        <member name="P:Rocket.API.Economy.IEconomyCurrency.Name">
            <summary>
                The currency name.
            </summary>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyCurrency.ExchangeTo(System.Decimal,Rocket.API.Economy.IEconomyCurrency)">
            <summary>
                Exchanges the given amount to a different currency.
            </summary>
            <param name="amount">The amount to exchange from this currency.</param>
            <param name="targetCurrency">The currency to exchange to.</param>
            <exception>When the target currency is not supported.</exception>
            <returns>The exchanged amount.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyCurrency.CanExchange(Rocket.API.Economy.IEconomyCurrency)">
            <summary>
                Checks if this cucrrency can be exchanged with the other one.
            </summary>
            <param name="currency">The currency to check.</param>
            <returns><b>true</b> if balance can be exchanged from the other currency; otherwise; <b>false</b>.</returns>
        </member>
        <member name="T:Rocket.API.Economy.IEconomyProvider">
            <summary>
                The service responsible for managing economy and currencies.
            </summary>
        </member>
        <member name="P:Rocket.API.Economy.IEconomyProvider.Currencies">
            <summary>
                All currencies. Contains at least one element.
            </summary>
        </member>
        <member name="P:Rocket.API.Economy.IEconomyProvider.DefaultCurrency">
            <summary>
                The default currency. Will never return null.
            </summary>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.AddBalance(Rocket.API.User.IIdentity,System.Decimal,System.String)">
            <summary>
                Adds balance to the users account.
            </summary>
            <param name="owner">The account owner.</param>
            <param name="amount">The amount to add. Should not be negative.</param>
            <param name="reason">The reason of the transaction.</param>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.Transfer(Rocket.API.Economy.IEconomyAccount,Rocket.API.Economy.IEconomyAccount,System.Decimal,System.String)">
            <summary>
                Makes a transaction from one account to another.
            </summary>
            <param name="source">The source account.</param>
            <param name="target">The target account.</param>
            <param name="amount">The amount to transfer. Must not be negative.</param>
            <param name="reason">The transaction reason (optional).</param>
            <returns><b>True</b> if the transaction was successful; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.AddBalance(Rocket.API.Economy.IEconomyAccount,System.Decimal,System.String)">
            <summary>
                Adds balance to the given account.
            </summary>
            <param name="amount">The amount to add. Should not be negative.</param>
            <param name="account">The account to add balance to.</param>
            <param name="reason">The reason of the transaction.</param>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.RemoveBalance(Rocket.API.User.IIdentity,System.Decimal,System.String)">
            <summary>
                Removes balance from the users account.
            </summary>
            <param name="owner">The account owner.</param>
            <param name="amount">The amount to remove. Should not be negative.</param>
            <param name="reason">The reason of the transaction.</param>
            <seealso cref="M:Rocket.API.Economy.IEconomyProvider.SupportsNegativeBalance(Rocket.API.User.IIdentity)" />
            <returns><b>true</b> if the balance could be removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.RemoveBalance(Rocket.API.Economy.IEconomyAccount,System.Decimal,System.String)">
            <summary>
                Removes balance from the users account based on a specific currency.
            </summary>
            <param name="amount">The amount to remove. Should not be negative.</param>
            <param name="reason">The reason of the transaction.</param>
            <param name="account">The account to remove balance from.</param>
            <seealso cref="M:Rocket.API.Economy.IEconomyProvider.SupportsNegativeBalance(Rocket.API.User.IIdentity)" />
            <returns><b>true</b> if the balance could be removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.SetBalance(Rocket.API.User.IIdentity,System.Decimal)">
            <summary>
                Sets the balance of the users account.
            </summary>
            <param name="owner">The account owner.</param>
            <param name="amount">The amount to set. See <see cref="M:Rocket.API.Economy.IEconomyProvider.SupportsNegativeBalance(Rocket.API.User.IIdentity)" />.</param>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.SetBalance(Rocket.API.Economy.IEconomyAccount,System.Decimal)">
            <summary>
                Sets the balance of the users account in a specific currency.
            </summary>
            <param name="amount">The amount to set. See <see cref="M:Rocket.API.Economy.IEconomyProvider.SupportsNegativeBalance(Rocket.API.User.IIdentity)" />.</param>
            <param name="account">The account to set the balance of.</param>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.SupportsNegativeBalance(Rocket.API.User.IIdentity)">
            <summary>
                Checks if the account of the owner can have negative balance.
            </summary>
            <param name="owner">The account owner whose account to check.</param>
            <returns><b>true</b> if the account can have negative balance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.SupportsNegativeBalance(Rocket.API.Economy.IEconomyAccount)">
            <summary>
                Checks if the account of the user can have negative balance.
            </summary>
            <param name="account">Checks if the given account has access.</param>
            <returns><b>true</b> if the account can have negative balance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.CreateAccount(Rocket.API.User.IIdentity,System.String,Rocket.API.Economy.IEconomyAccount@)">
            <summary>
                Creates an account.
            </summary>
            <param name="owner">The owner of the account.</param>
            <param name="name">The name of the account.</param>
            <param name="account">The account instance if it was created; otherwise, <b>null</b>.</param>
            <exception>If the account creation failed because of an internal error.</exception>
            <returns>
                <b>true</b> if account creation is supported and the account didn't exist already, and was created; otherwise,
                <b>false</b>.
            </returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.CreateAccount(Rocket.API.User.IIdentity,System.String,Rocket.API.Economy.IEconomyCurrency,Rocket.API.Economy.IEconomyAccount@)">
            <summary>
                Creates an account.
            </summary>
            <param name="owner">The owner of the account.</param>
            <param name="name">The name of the account.</param>
            <param name="currency">The accounts currency.</param>
            <param name="account">The account instance if it was created; otherwise, <b>null</b>.</param>
            <returns><b>true</b> if account creation is supported and the account could be created; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.DeleteAccount(Rocket.API.Economy.IEconomyAccount)">
            <summary>
                Deletes an account.
            </summary>
            <param name="account">The account to delete.</param>
            <returns><b>true</b> if the account could be deleted; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.GetAccount(Rocket.API.User.IIdentity,System.String)">
            <summary>
                Gets a specific account.
            </summary>
            <param name="owner">The account owner.</param>
            <param name="accountName">The account name or null for the default account.</param>
            <returns>The requested account or null if it was not found.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.GetAccounts(Rocket.API.User.IIdentity)">
            <summary>
                Gets the accounts of the given user. Can return an empty set if no accounts were created yet.
            </summary>
            <param name="owner">The user whose accounts to get.</param>
            <returns>the accounts of the given user</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.SupportsIdentity(Rocket.API.User.IIdentity)">
            <summary>
                Checks if the given identity is supported by the economy provider.
            </summary>
            <param name="identity">The identity to check.</param>
            <returns><b>True</b> if the identity is supported; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Economy.IEconomyProvider.GetBalance(Rocket.API.User.IIdentity)">
            <summary>
                Gets the (total) balance for the given identity.
            </summary>
            <param name="identity">The identitiy whose balance to get.</param>
            <returns>The balance of the identity. Might be negative.</returns>
        </member>
        <member name="P:Rocket.API.Economy.IEconomyProvider.SupportsMultipleAccounts">
            <summary>
                Checks if the provider supports multiple accounts per user.
            </summary>
        </member>
        <member name="T:Rocket.API.Entities.IEntity">
            <summary>
                A game entitiy. Players, Monsters, Animals, Vehicles, Zombies, etc...
            </summary>
        </member>
        <member name="P:Rocket.API.Entities.IEntity.EntityTypeName">
            <summary>
                The type name of the entitiy. "Zombie", "Player", "Animal", etc...
            </summary>
        </member>
        <member name="P:Rocket.API.Entities.IEntity.Position">
            <summary>
                The world position of the entity.
            </summary>
        </member>
        <member name="T:Rocket.API.Entities.ILivingEntity">
            <summary>
                Represents a living entity with health.
            </summary>
        </member>
        <member name="P:Rocket.API.Entities.ILivingEntity.MaxHealth">
            <summary>
                The max health of the entity.
            </summary>
        </member>
        <member name="P:Rocket.API.Entities.ILivingEntity.Health">
            <summary>
                The current health of the entitiy.
            </summary>
        </member>
        <member name="M:Rocket.API.Entities.ILivingEntity.Kill">
            <summary>
                Kills the entity.
            </summary>
        </member>
        <member name="M:Rocket.API.Entities.ILivingEntity.Kill(Rocket.API.Entities.IEntity)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Entities.ILivingEntity.Kill" />
            </summary>
            <param name="killer">the killer of the entity.</param>
        </member>
        <member name="M:Rocket.API.Entities.ILivingEntity.Kill(Rocket.API.User.IUser)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Entities.ILivingEntity.Kill" />
            </summary>
            <param name="killer">the killer of the entity.</param>
        </member>
        <member name="T:Rocket.API.Logging.LogLevel">
            <summary>
                Log levels for <see cref="T:Rocket.API.Logging.ILogger" />.
            </summary>
        </member>
        <member name="F:Rocket.API.Logging.LogLevel.Trace">
            <summary>
                Trace messages.
            </summary>
        </member>
        <member name="F:Rocket.API.Logging.LogLevel.Debug">
            <summary>
                Debug messages.
            </summary>
        </member>
        <member name="F:Rocket.API.Logging.LogLevel.Game">
            <summary>
                Game game messages.
            </summary>
        </member>
        <member name="F:Rocket.API.Logging.LogLevel.Information">
            <summary>
                Information messages.
            </summary>
        </member>
        <member name="F:Rocket.API.Logging.LogLevel.Warning">
            <summary>
                Warning messages.
            </summary>
        </member>
        <member name="F:Rocket.API.Logging.LogLevel.Error">
            <summary>
                Error messages.
            </summary>
        </member>
        <member name="F:Rocket.API.Logging.LogLevel.Fatal">
            <summary>
                Fatal messages which require immediate action.
            </summary>
        </member>
        <member name="T:Rocket.API.Logging.ILogger">
            <summary>
                A provider for logging.
            </summary>
        </member>
        <member name="M:Rocket.API.Logging.ILogger.Log(System.String,Rocket.API.Logging.LogLevel,System.Exception,System.Object[])">
            <summary>
                Logs a message.
            </summary>
            <param name="level">Thel log level.</param>
            <param name="message">The message to log.</param>
            <param name="exception">The related exception if one exists.</param>
            <param name="arguments">The message arguments. See <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
        </member>
        <member name="M:Rocket.API.Logging.ILogger.IsEnabled(Rocket.API.Logging.LogLevel)">
            <summary>
                Checks if a log level is enabled.
            </summary>
            <param name="level">The log level to check.</param>
            <returns><b>true</b> if the log level is enabled; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Rocket.API.Permissions.IPermissionGroup">
            <summary>
                A permission group contains a collection of permissions.
            </summary>
        </member>
        <member name="P:Rocket.API.Permissions.IPermissionGroup.Priority">
            <summary>
                The priority of this group.
            </summary>
        </member>
        <member name="T:Rocket.API.Permissions.PermissionResult">
            <summary>
                Result of a permission check.
            </summary>
        </member>
        <member name="F:Rocket.API.Permissions.PermissionResult.Default">
            <summary>
                The permission was neither denied nor granted. Default action (which is usually the same as deny) should be
                executed.
            </summary>
        </member>
        <member name="F:Rocket.API.Permissions.PermissionResult.Grant">
            <summary>
                The permission was explicitly granted.
            </summary>
        </member>
        <member name="F:Rocket.API.Permissions.PermissionResult.Deny">
            <summary>
                The permission was explicitly denied.
            </summary>
        </member>
        <member name="T:Rocket.API.Permissions.IPermissionProvider">
            <summary>
                The Permission Provider is responsible for checking permissions.
            </summary>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.GetGrantedPermissions(Rocket.API.User.IIdentity,System.Boolean)">
            <summary>
                Gets the permissions of the given target.
            </summary>
            <param name="target">The target whichs permissions to get.</param>
            <param name="inherit">Defines if the parent groups permissions should be included.</param>
            <returns>A list of all permissions of the target.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.GetDeniedPermissions(Rocket.API.User.IIdentity,System.Boolean)">
            <summary>
                Gets the denied permissions of the given target.
            </summary>
            <param name="target">The target whichs denied permissions to get.</param>
            <param name="inherit">Defines if the parent groups denied permissions should be included.</param>
            <returns>A list of all denied permissions of the target.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.SupportsTarget(Rocket.API.User.IIdentity)">
            <summary>
                Defines if the given target is supported by this provider.
            </summary>
            <param name="target">The target to check.</param>
            <returns><b>true</b> if the given target is supported; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.CheckPermission(Rocket.API.User.IIdentity,System.String)">
            <summary>
                Check if the target has the given permission.
            </summary>
            <param name="target">The target to check.</param>
            <param name="permission">The permission to check.</param>
            <returns>
                <see cref="F:Rocket.API.Permissions.PermissionResult.Grant" /> if the target explicity has the permission,
                <see cref="F:Rocket.API.Permissions.PermissionResult.Deny" /> if the target explicitly does not have the permission; otherwise,
                <see cref="F:Rocket.API.Permissions.PermissionResult.Default" />
            </returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.CheckHasAllPermissions(Rocket.API.User.IIdentity,System.String[])">
            <summary>
                Checks if the target has all of the given permissions.
            </summary>
            <param name="target">The target to check.</param>
            <param name="permissions">The permissions to check.</param>
            <returns>
                <see cref="F:Rocket.API.Permissions.PermissionResult.Grant" /> if the target explicity has access to all of the given permissions,
                <see cref="F:Rocket.API.Permissions.PermissionResult.Deny" /> if the target explicitly does not have access to any of the permissions;
                otherwise, <see cref="F:Rocket.API.Permissions.PermissionResult.Default" />
            </returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.CheckHasAnyPermission(Rocket.API.User.IIdentity,System.String[])">
            <summary>
                Checks if the target has any of the given permissions.
            </summary>
            <param name="target">The target to check.</param>
            <param name="permissions">The permissions to check.</param>
            <returns>
                <see cref="F:Rocket.API.Permissions.PermissionResult.Grant" /> if the target explicity has access to any of the given permissions,
                <see cref="F:Rocket.API.Permissions.PermissionResult.Deny" /> if the target explicitly does not have access to any of the permissions;
                otherwise, <see cref="F:Rocket.API.Permissions.PermissionResult.Default" />
            </returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.AddPermission(Rocket.API.User.IIdentity,System.String)">
            <summary>
                Adds an explicitly granted permission to the target.
            </summary>
            <param name="target">The target.</param>
            <param name="permission">The permission to add.</param>
            <returns><b>true</b> if the permission was successfully added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.AddDeniedPermission(Rocket.API.User.IIdentity,System.String)">
            <summary>
                Adds an explicitly denied permission to the target.
            </summary>
            <param name="target">The target.</param>
            <param name="permission">The denied permission to add.</param>
            <returns><b>true</b> if the permission was successfully added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.RemovePermission(Rocket.API.User.IIdentity,System.String)">
            <summary>
                Removes an explicitly granted permission from the target.
            </summary>
            <param name="target">The target.</param>
            <param name="permission">The permission to remove.</param>
            <returns><b>true</b> if the permission was successfully removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.RemoveDeniedPermission(Rocket.API.User.IIdentity,System.String)">
            <summary>
                Removes an explicitly denied permission from the target.
            </summary>
            <param name="target">The target.</param>
            <param name="permission">The permission to remove.</param>
            <returns><b>true</b> if the permission was successfully removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.GetPrimaryGroup(Rocket.API.User.IUser)">
            <summary>
                Gets the primary group of the given user.
            </summary>
            <param name="user">The user wose primary group to get of.</param>
            <returns>the primary group if it exists; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.GetGroup(System.String)">
            <summary>
                Gets the primary group with the given ID.
            </summary>
            <param name="id">The ID of the group.</param>
            <returns>the group if it exists; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.GetGroups(Rocket.API.User.IIdentity)">
            <summary>
                Gets all inherited groups of the target. If target is a group itself, it will return the parent groups.
            </summary>
            <param name="target">The target.</param>
            <returns>the inherited groups of the target.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.GetGroups">
            <summary>
                Gets all registered groups.
            </summary>
            <returns>all registed groups of this provider.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.UpdateGroup(Rocket.API.Permissions.IPermissionGroup)">
            <summary>
                Updates a group.
            </summary>
            <param name="group">The group to update.</param>
            <returns><b>true</b> if the group exists and could be updated; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.AddGroup(Rocket.API.User.IIdentity,Rocket.API.Permissions.IPermissionGroup)">
            <summary>
                Adds the given group to the user.
            </summary>
            <param name="target">The target to add the group to.</param>
            <param name="group">The group to add.</param>
            <returns><b>true</b> if the group was successfully added; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.RemoveGroup(Rocket.API.User.IIdentity,Rocket.API.Permissions.IPermissionGroup)">
            <summary>
                Removes the given group from the user.
            </summary>
            <param name="target">The target to add the group to.</param>
            <param name="group">The group to remove.</param>
            <returns><b>true</b> if the group was successfully removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.CreateGroup(Rocket.API.Permissions.IPermissionGroup)">
            <summary>
                Creates a new permission group.
            </summary>
            <param name="group">The group to create.</param>
            <returns><b>true</b> if the group was successfully created; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.DeleteGroup(Rocket.API.Permissions.IPermissionGroup)">
            <summary>
                Deletes a permission group.
            </summary>
            <param name="group">The group to delete.</param>
            <returns><b>true</b> if the group was successfully deleted; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.Load(Rocket.API.Configuration.IConfigurationContext)">
            <summary>
                Loads the permissions from the given context.
            </summary>
            <param name="context">the configuration context to load the permissions from.</param>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.Reload">
            <summary>
                Reloads the permissions from the context which was used to initially load them.<br /><br />
                May override not saved changes.
            </summary>
        </member>
        <member name="M:Rocket.API.Permissions.IPermissionProvider.Save">
            <summary>
                Saves the changes to the permissions.
            </summary>
        </member>
        <member name="T:Rocket.API.Eventing.Event">
            <inheritdoc />
        </member>
        <member name="M:Rocket.API.Eventing.Event.#ctor(System.Boolean)">
            <param name="global">Defines if the event is emitted globally</param>
        </member>
        <member name="M:Rocket.API.Eventing.Event.#ctor(Rocket.API.Eventing.EventExecutionTargetContext,System.Boolean)">
            <param name="executionTarget">When and where should the event be called? See <see cref="P:Rocket.API.Eventing.Event.ExecutionTarget" /></param>
            <param name="global">Defines if the event is emitted globally</param>
        </member>
        <member name="M:Rocket.API.Eventing.Event.#ctor(System.String,Rocket.API.Eventing.EventExecutionTargetContext,System.Boolean)">
            <param name="executionTarget">When and where should the event be called? See <see cref="P:Rocket.API.Eventing.Event.ExecutionTarget" /></param>
            <param name="name">The name of the event. Will be auto set when null.</param>
            <param name="global">Defines if the event is emitted globally</param>
        </member>
        <member name="P:Rocket.API.Eventing.Event.Arguments">
            <summary>
                <inheritdoc /><br /><br />
                In this implementation it contains the properties of the class with their respective values.
            </summary>
        </member>
        <member name="P:Rocket.API.Eventing.Event.Name">
            <inheritdoc />
        </member>
        <member name="P:Rocket.API.Eventing.Event.ExecutionTarget">
            <inheritdoc />
        </member>
        <member name="P:Rocket.API.Eventing.Event.IsGlobal">
            <inheritdoc />
        </member>
        <member name="T:Rocket.API.Eventing.EventExecutionTargetContext">
            <summary>
                Defines when and where event listeners should be notified.
            </summary>
        </member>
        <member name="F:Rocket.API.Eventing.EventExecutionTargetContext.NextFrame">
            <summary>
                Notifies the subscriptions on the next frame update.
            </summary>
        </member>
        <member name="F:Rocket.API.Eventing.EventExecutionTargetContext.NextAsyncFrame">
            <summary>
                Notifies the subscriptions on the next frame update from a separate thread.
            </summary>
        </member>
        <member name="F:Rocket.API.Eventing.EventExecutionTargetContext.NextPhysicsUpdate">
            <summary>
                Notifies the subscriptions the event on the next physics update.
            </summary>
        </member>
        <member name="F:Rocket.API.Eventing.EventExecutionTargetContext.Sync">
            <summary>
                Notifies the subscriptions the event immediately.
            </summary>
        </member>
        <member name="T:Rocket.API.Eventing.IEventEmitter">
            <summary>
                An object that emits an event.
            </summary>
        </member>
        <member name="P:Rocket.API.Eventing.IEventEmitter.Name">
            <summary>
                The name of the emitter. This is the name the listeners can subscribe to.
            </summary>
        </member>
        <member name="T:Rocket.API.Eventing.ICancellableEvent">
            <summary>
                Defines an event that can be cancelled.
            </summary>
        </member>
        <member name="P:Rocket.API.Eventing.ICancellableEvent.IsCancelled">
            <summary>
                Defines if the event action should be cancelled.
            </summary>
        </member>
        <member name="T:Rocket.API.Eventing.IEvent">
            <summary>
                Base representation of an event.
            </summary>
        </member>
        <member name="P:Rocket.API.Eventing.IEvent.Name">
            <summary>
                The name of the event.
            </summary>
        </member>
        <member name="P:Rocket.API.Eventing.IEvent.IsGlobal">
            <summary>
                Defines if the event is broadcasted globally to all listeners.
            </summary>
        </member>
        <member name="P:Rocket.API.Eventing.IEvent.ExecutionTarget">
            <summary>
                Defines how and when the event should be fired.
            </summary>
        </member>
        <member name="P:Rocket.API.Eventing.IEvent.Arguments">
            <summary>
                The arguments of the event.
            </summary>
        </member>
        <member name="T:Rocket.API.Eventing.IEventListener">
            <summary>
                A listener for one or more events.
            </summary>
        </member>
        <member name="T:Rocket.API.Eventing.IEventListener`1">
            <summary>
                <inheritdoc />
            </summary>
            <typeparam name="TEvent">The event to subscribe to.</typeparam>
        </member>
        <member name="M:Rocket.API.Eventing.IEventListener`1.HandleEvent(Rocket.API.Eventing.IEventEmitter,`0)">
            <summary>
                Called when an event got emitted.
            </summary>
            <param name="emitter">The event emitter.</param>
            <param name="event">The event instance.</param>
        </member>
        <member name="T:Rocket.API.Eventing.EventCallback`1">
            <summary>
                The type safe callback for event notifications.
            </summary>
            <typeparam name="TEvent">The event type.</typeparam>
            <param name="sender">The event emitter.</param>
            <param name="event">The event instance.</param>
        </member>
        <member name="T:Rocket.API.Eventing.EventCallback">
            <summary>
                The callback for event notifications.
            </summary>
            <param name="sender">The event emitter.</param>
            <param name="event">The event instance.</param>
        </member>
        <member name="T:Rocket.API.Eventing.EventExecutedCallback">
            <summary>
                The emit callback for events that have finished and notified all listeners.
            </summary>
            <param name="event"></param>
        </member>
        <member name="T:Rocket.API.Eventing.IEventManager">
            <summary>
                The event manager is responsible for emitting events and for managing their subscriptions.
            </summary>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,System.String,Rocket.API.Eventing.EventCallback)">
            <summary>
                Subscribe to an event.
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="eventName">The event to subscribe to.</param>
            <param name="callback">The action to execute. See <see cref="T:Rocket.API.Eventing.EventCallback" /></param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Subscribe``1(Rocket.API.ILifecycleObject,Rocket.API.Eventing.EventCallback{``0},System.String)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,System.String,Rocket.API.Eventing.EventCallback)" />
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <param name="emitterName">The emitter to subscribe to. Will be a global subscription if the emitterName is null.</param>
            <typeparam name="TEvent">The event to subscribe to.</typeparam>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,System.Type,Rocket.API.Eventing.EventCallback,System.String)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,System.String,Rocket.API.Eventing.EventCallback)" />
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <param name="emitterName">The emitter to subscribe to. Will be a global subscription if the emitterName is null.</param>
            <param name="eventType">The event to subscribe to.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,System.String,System.String,Rocket.API.Eventing.EventCallback)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,System.String,Rocket.API.Eventing.EventCallback)" />
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <param name="emitterName">The emitter to subscribe to. Will be a global subscription if the emitterName is null.</param>
            <param name="eventName">The event to subscribe to.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Subscribe``2(Rocket.API.ILifecycleObject,Rocket.API.Eventing.EventCallback{``0})">
            <summary>
                <inheritdoc cref="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,System.String,Rocket.API.Eventing.EventCallback)" />
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <typeparam name="TEvent">The event to subscribe to.</typeparam>
            <typeparam name="TEmitter">The emitter to subscribe to.</typeparam>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,Rocket.API.Eventing.EventCallback,System.Type,System.Type)">
            <summary>
                <inheritdoc cref="M:Rocket.API.Eventing.IEventManager.Subscribe(Rocket.API.ILifecycleObject,System.String,Rocket.API.Eventing.EventCallback)" />
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="callback">The action to execute after all listeners were notified.</param>
            <param name="eventType">The event to subscribe to.</param>
            <param name="emitterType">The emitter to subscribe to. Will be a global subscription if the emitterType is null.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Unsubscribe(Rocket.API.ILifecycleObject)">
            <summary>
                Unsubscribe all listener subscriptions of the given lifecycle object.
            </summary>
            <param name="object">The associated lifecycle object.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Unsubscribe(Rocket.API.ILifecycleObject,System.String)">
            <summary>
                Unsubscribe all subscriptions for the given event type of the given lifecycle object.
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="eventName">The event to unsubscribe from. Will unsubscribe globally if emitterName is null.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Unsubscribe``1(Rocket.API.ILifecycleObject)">
            <summary>
                Unsubscribe the event from this lifecycle object type-safe
            </summary>
            <param name="object">The associated lifecycle object.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Unsubscribe(Rocket.API.ILifecycleObject,System.Type)">
            <summary>
                Unsubscribe all subscriptions for the given event type of the given lifecycle object.
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="eventType">The event to unsubscribe from.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Unsubscribe(Rocket.API.ILifecycleObject,System.String,System.String)">
            <summary>
                Unsubscribe an event subscription of the given lifecycle object.
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="emitterName">The emitter to unsubscribe from. Will unsubscribe globally if emitterName is null.</param>
            <param name="eventName">The event to unsubscribe from. Will unsubscribe from all event types if eventName is null.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Unsubscribe``2(Rocket.API.ILifecycleObject)">
            <summary>
                Unsubscribe an event subscription of the given lifecycle object from a specific emitter.
            </summary>
            <param name="object">The associated lifecycle object.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Unsubscribe(Rocket.API.ILifecycleObject,System.Type,System.Type)">
            <summary>
                Unsubscribe an event subscription of the given lifecycle object from a specific emitter.
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="eventType">The event to unsubscribe from. . Will unsubscribe from all event types if eventType is null.</param>
            <param name="eventEmitterType">The emitter to unsubscribe from. Will unsubscribe globally if eventEmitterType is null.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.AddEventListener(Rocket.API.ILifecycleObject,Rocket.API.Eventing.IEventListener)">
            <summary>
                Register an event listener instance.
            </summary>
            <param name="object">The associated lifecycle object.</param>
            <param name="eventListener">The event listener to register.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.RemoveEventListener(Rocket.API.Eventing.IEventListener)">
            <summary>
                Remove an event listeners subscription.
            </summary>
            <param name="eventListener">The event listener to remove.</param>
        </member>
        <member name="M:Rocket.API.Eventing.IEventManager.Emit(Rocket.API.Eventing.IEventEmitter,Rocket.API.Eventing.IEvent,Rocket.API.Eventing.EventExecutedCallback)">
            <summary>
                Emits an event and optionally handles the result
            </summary>
            <param name="sender">The event emitter.</param>
            <param name="event">The event instance.</param>
            <param name="callback">The event finish callback. See <see cref="T:Rocket.API.Eventing.EventExecutedCallback" />.</param>
        </member>
        <member name="T:Rocket.API.I18N.ITranslatable">
            <summary>
                An object which has translations.
            </summary>
        </member>
        <member name="P:Rocket.API.I18N.ITranslatable.Translations">
            <summary>
                The translation source.
            </summary>
        </member>
        <member name="P:Rocket.API.I18N.ITranslatable.DefaultTranslations">
            <summary>
                The default translations.
            </summary>
        </member>
        <member name="T:Rocket.API.I18N.ITranslationCollection">
            <summary>
                Provides translations.
            </summary>
        </member>
        <member name="M:Rocket.API.I18N.ITranslationCollection.Get(System.String,System.Object[])">
            <summary>
                Get a localized message from the given translation key.
            </summary>
            <param name="translationKey">The translation key.</param>
            <param name="arguments">The arguments. See <see cref="M:System.String.Format(System.String,System.Object[])" />.</param>
            <returns>the translated message</returns>
        </member>
        <member name="M:Rocket.API.I18N.ITranslationCollection.Set(System.String,System.String)">
            <summary>
                Sets the format for a translation key.
            </summary>
            <param name="translationKey"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rocket.API.I18N.ITranslationCollection.Load(Rocket.API.Configuration.IConfigurationContext,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Loads the translations from a <see cref="T:Rocket.API.Configuration.IConfigurationContext">configuration context</see>.
            </summary>
            <param name="context"></param>
            <param name="defaultConfiguration"></param>
        </member>
        <member name="M:Rocket.API.I18N.ITranslationCollection.Reload">
            <summary>
                Reloads the translations.
            </summary>
        </member>
        <member name="M:Rocket.API.I18N.ITranslationCollection.Save">
            <summary>
                Saves the changes of <see cref="M:Rocket.API.I18N.ITranslationCollection.Set(System.String,System.String)" />.
            </summary>
        </member>
        <member name="T:Rocket.API.Scheduler.ExecutionTargetContext">
            <summary>
                Defines when and how an action should be executed.
            </summary>
        </member>
        <member name="F:Rocket.API.Scheduler.ExecutionTargetContext.NextFrame">
            <summary>
                Executes the action on the next frame update in the main thread.
            </summary>
        </member>
        <member name="F:Rocket.API.Scheduler.ExecutionTargetContext.NextAsyncFrame">
            <summary>
                Executes the action on the next frame update in a separate thread.
            </summary>
        </member>
        <member name="F:Rocket.API.Scheduler.ExecutionTargetContext.NextPhysicsUpdate">
            <summary>
                Executes the action on the next physic update.
            </summary>
        </member>
        <member name="F:Rocket.API.Scheduler.ExecutionTargetContext.Sync">
            <summary>
                Executes the action on the current thread (will block current thread).
            </summary>
        </member>
        <member name="F:Rocket.API.Scheduler.ExecutionTargetContext.EveryFrame">
            <summary>
                Executes the action on every frame update continuously in the main thread.
            </summary>
        </member>
        <member name="F:Rocket.API.Scheduler.ExecutionTargetContext.EveryAsyncFrame">
            <summary>
                Executes the action on every frame update continuously in a separate thread.
            </summary>
        </member>
        <member name="F:Rocket.API.Scheduler.ExecutionTargetContext.EveryPhysicsUpdate">
            <summary>
                Executes the action on every physics update continuously.
            </summary>
        </member>
        <member name="T:Rocket.API.Scheduler.ITaskScheduler">
            <summary>
                The service responsible for scheduling and managing tasks.
            </summary>
        </member>
        <member name="P:Rocket.API.Scheduler.ITaskScheduler.Tasks">
            <summary>
                Gets all current scheduled tasks.
            </summary>
        </member>
        <member name="M:Rocket.API.Scheduler.ITaskScheduler.ScheduleEveryFrame(Rocket.API.ILifecycleObject,System.Action)">
            <summary>
                Schedules an action for all frames on the main thread. See <see cref="F:Rocket.API.Scheduler.ExecutionTargetContext.EveryFrame" />.
            </summary>
        </member>
        <member name="M:Rocket.API.Scheduler.ITaskScheduler.ScheduleNextFrame(Rocket.API.ILifecycleObject,System.Action)">
            <summary>
                Schedules an action for the next frame on the main thread. See <see cref="F:Rocket.API.Scheduler.ExecutionTargetContext.NextFrame" />.
            </summary>
        </member>
        <member name="M:Rocket.API.Scheduler.ITaskScheduler.Schedule(Rocket.API.ILifecycleObject,System.Action,Rocket.API.Scheduler.ExecutionTargetContext)">
            <summary>
                Schedules an action.
            </summary>
            <seealso cref="T:Rocket.API.Scheduler.ExecutionTargetContext" />
        </member>
        <member name="M:Rocket.API.Scheduler.ITaskScheduler.ScheduleNextPhysicUpdate(Rocket.API.ILifecycleObject,System.Action)">
            <summary>
                Schedule an action which includes physics interactions (e.g. applying force to an object) for the next physics
                update. See <see cref="F:Rocket.API.Scheduler.ExecutionTargetContext.NextPhysicsUpdate" />.<br />
                Execution time depends on the engine implemention.
            </summary>
            <param name="action">The action to schedule</param>
            <param name="owner">The owner of the task.</param>
        </member>
        <member name="M:Rocket.API.Scheduler.ITaskScheduler.ScheduleEveryPhysicUpdate(Rocket.API.ILifecycleObject,System.Action)">
            <summary>
                Schedule an action which includes physics interaction (e.g. applying force to an object) for every physics update.
                See <see cref="F:Rocket.API.Scheduler.ExecutionTargetContext.EveryPhysicsUpdate" />.<br />
                Execution time depends on the engine implemention.
            </summary>
            <param name="action">The action to schedule</param>
            <param name="owner">The owner of the task.</param>
        </member>
        <member name="M:Rocket.API.Scheduler.ITaskScheduler.ScheduleEveryAsyncFrame(Rocket.API.ILifecycleObject,System.Action)">
            <summary>
                Schedules an action for all frame on a separate thread. See <see cref="F:Rocket.API.Scheduler.ExecutionTargetContext.EveryAsyncFrame" />.
            </summary>
        </member>
        <member name="M:Rocket.API.Scheduler.ITaskScheduler.ScheduleNextAsyncFrame(Rocket.API.ILifecycleObject,System.Action)">
            <summary>
                Schedules an action for the next frame on a separate thread. See
                <see cref="F:Rocket.API.Scheduler.ExecutionTargetContext.NextPhysicsUpdate" />.
            </summary>
        </member>
        <member name="M:Rocket.API.Scheduler.ITaskScheduler.CancelTask(Rocket.API.Scheduler.ITask)">
            <summary>
                Cancels a task.
            </summary>
        </member>
        <member name="T:Rocket.API.Scheduler.ITask">
            <summary>
                Represents a scheduled task.
            </summary>
        </member>
        <member name="P:Rocket.API.Scheduler.ITask.Owner">
            <summary>
                The owner of the task.
            </summary>
        </member>
        <member name="P:Rocket.API.Scheduler.ITask.Action">
            <summary>
                The action to execute.
            </summary>
        </member>
        <member name="P:Rocket.API.Scheduler.ITask.IsCancelled">
            <summary>
                Checks if the task was cancelled.
            </summary>
        </member>
        <member name="P:Rocket.API.Scheduler.ITask.ExecutionTarget">
            <summary>
                Defines how and when the task should be executed.
            </summary>
            <seealso cref="T:Rocket.API.Scheduler.ExecutionTargetContext" />
        </member>
        <member name="P:Rocket.API.Scheduler.ITask.IsFinished">
            <summary>
                Checks if the task has finished.
            </summary>
        </member>
        <member name="M:Rocket.API.Scheduler.ITask.Cancel">
            <summary>
                Cancels the task.
            </summary>
        </member>
        <member name="T:Rocket.API.ILifecycleObject">
            <summary>
                Defines an object with a lifecycle.
            </summary>
        </member>
        <member name="P:Rocket.API.ILifecycleObject.IsAlive">
            <summary>
                Checks if the object is alive. When it is not alive, it must not be able to execute any code and should not be
                notified of any events.
            </summary>
        </member>
        <member name="T:Rocket.API.IHost">
            <summary>
                A game specific implemention of RocketMod. Implementations are responsible for providing game specific features.
            </summary>
        </member>
        <member name="P:Rocket.API.IHost.InstanceId">
            <summary>
                The game instance ID.
            </summary>
        </member>
        <member name="P:Rocket.API.IHost.Console">
            <summary>
                Gets the console. <br />
                <b>Might return null.</b>
            </summary>
        </member>
        <member name="M:Rocket.API.IHost.Init(Rocket.API.IRuntime)">
            <summary>
                Initializes the implementation.
            </summary>
            <param name="runtime">The RocketMod runtime.</param>
        </member>
        <member name="M:Rocket.API.IHost.Shutdown">
            <summary>
                Shuts the implementation down.
            </summary>
        </member>
        <member name="M:Rocket.API.IHost.Reload">
            <summary>
                Reloads the implementation.
            </summary>
        </member>
        <member name="T:Rocket.API.IRuntime">
            <summary>
                Defines a RocketMod Runtime. The runtime is responsibe for initializing RocketMod itself.
            </summary>
        </member>
        <member name="P:Rocket.API.IRuntime.Container">
            <summary>
                The base dependency container.
            </summary>
        </member>
        <member name="M:Rocket.API.IRuntime.Shutdown">
            <summary>
                Shuts down RocketMod and disposes all services.
            </summary>
        </member>
        <member name="P:Rocket.API.IRuntime.Version">
            <summary>
                The RocketMod version.
            </summary>
        </member>
        <member name="T:Rocket.API.Plugins.IPlugin">
            <summary>
                Represents a RocketMod plugin.
            </summary>
        </member>
        <member name="P:Rocket.API.Plugins.IPlugin.PluginManager">
            <summary>
                The related plugin manager.
            </summary>
        </member>
        <member name="P:Rocket.API.Plugins.IPlugin.Container">
            <summary>
                The dependency container;
            </summary>
        </member>
        <member name="M:Rocket.API.Plugins.IPlugin.Load(System.Boolean)">
            <summary>
                Activates the plugin.
            </summary>
            <returns><b>true</b> if the plugin could be activated; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Plugins.IPlugin.Unload">
            <summary>
                Deactivates the plugin.
            </summary>
            <returns><b>true</b> if the plugin could be deactivated; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Rocket.API.Plugins.IPluginManager">
            <summary>
                A service which provides plugins and is responsible for managing them.
            </summary>
        </member>
        <member name="P:Rocket.API.Plugins.IPluginManager.Plugins">
            <summary>
                The provided plugins.
            </summary>
        </member>
        <member name="M:Rocket.API.Plugins.IPluginManager.GetPlugin(System.String)">
            <summary>
                Gets a plugin by name.
            </summary>
            <param name="name">The name of the plugin.</param>
            <returns>The plugin instance if it was found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Rocket.API.Plugins.IPluginManager.PluginExists(System.String)">
            <summary>
                Checks if a plugin exists with the given name.
            </summary>
            <param name="name">The name to check.</param>
            <returns><b>true</b> if the plugin exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Rocket.API.Plugins.IPluginManager.Init">
            <summary>
                Initializes the plugin manager.
            </summary>
        </member>
        <member name="M:Rocket.API.Plugins.IPluginManager.ExecuteSoftDependCode(System.String,System.Action{Rocket.API.Plugins.IPlugin})">
            <summary>
                Executes soft depend code if the given plugin was loaded.
            </summary>
            <remarks>
                Directly referencing another plugin breaks the calling plugin when the referenced plugin is not available yet.
                <br /><br />
                The full qualifying type names (types with fully declared namespaces) must be used instead of "using" statements
                for
                namespaces of the referenced plugin.<br /><br />
                <b>Example:</b>
                <code>
                    pluginManager.ExecuteSoftDependCode("FancyFeast, (IRocketPlugin plugin) =>{
                        FancyFeastPlugin.Feast pluginInstance = (FancyFeastPlugin.Feast) plugin;
                        pluginInstance.StartFeast();
                    });
                </code>
            </remarks>
            <param name="pluginName">The name of the referenced plugin.</param>
            <param name="action">The action to be invoked when the plugin was found.</param>
        </member>
    </members>
</doc>
